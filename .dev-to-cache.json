[{"id":1446866,"title":"Melhorias de performance recentes no ecossistema JavaScript","description":"Vamos focar aqui em algumas melhorias de performance nas versões recentes Angular 16, Next.js 13 e...","publishedAt":"2023-04-24T19:39:04.297Z","devToSlug":"melhorias-de-performance-recentes-no-ecossistema-javascript-10ej","devToPath":"/raphaelramos/melhorias-de-performance-recentes-no-ecossistema-javascript-10ej","devToURL":"https://dev.to/raphaelramos/melhorias-de-performance-recentes-no-ecossistema-javascript-10ej","commentsCount":0,"publicReactionsCount":1,"positiveReactionsCount":1,"coverImage":"https://res.cloudinary.com/practicaldev/image/fetch/s--0t2YOyZB--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/mv6v6usqbjre7dz4ce8h.png","tags":["javascript","frontend","node","braziliandevs"],"canonical":"https://raphaelramos.dev/blog/melhorias-perfomance-javascript-2023","collectionId":-1,"slug":"/blog/melhorias-perfomance-javascript-2023","markdown":"Vamos focar aqui em algumas melhorias de performance nas versões recentes Angular 16, Next.js 13 e Node.js 20.\n\n## Angular 16\n\nCom lançamento em maio de 2023, quero destacar 3 novidades dessa versão:\n\n**Servidor de desenvolvimento baseado no vite**\n\nCom a performance muito superior ao Webpack, a ferramenta aproveita duas melhorias feitas recentemente no ecossistema JavaScript: a disponibilidade de ES Modules no navegador e as ferramentas de empacotamento de compilação para nativo, como esbuild.\nTeremos uma execução e atualização mais rápida ao usar ng serve.\n\n**Hidratação não destrutiva**\n\nJá disponível há algum tempo no Next.js, a hidratação no desenvolvimento da Web refere-se ao processo de conversão de conteúdo HTML renderizado do lado do servidor em uma página da Web totalmente interativa e funcional no lado do cliente, anexando comportamento JavaScript e ouvintes de evento. Isso reduz o tempo de interação. [Documentação para implementação.](https://next.angular.io/guide/hydration)\n\n**Signals**\n\nSão uma nova maneira de gerenciar mudanças de estado em aplicativos Angular, inspirados no Solid.js.\n\nÉ poderoso como o RxJS, mas com uma sintaxe mais simples. As assinaturas são criadas e destruídas automaticamente, então ao contrário do RxJS, não precisamos inscrever e cancelar a inscrição.\n\nGraças ao Signals, podemos usar o Angular sem zone.js, que não possui uma boa performance.\n\n```js\nconst counter = signal(0);\n\ncounter.set(2);\ncounter.update(count => count + 1);\n```\n\n**NgOptimizedImage**\n\nDo Angular 15, mas inclui por ainda não ser tão conhecido.\nEssa diretiva é responsável por implementar as melhores práticas de desempenho ao carregar imagens.\n\n```js\nimport { NgOptimizedImage } from '@angular/common'\n\n<img ngSrc=\"cat.jpg\">\n```\n\nTemos visto nas últimas versões do Angular uma buscar em diminuir a curva de aprendizagem e grandes melhorias de performance. Pontos que eram muito mais fortes no React.\n\nConfira também meu artigo sobre [componentes autônomos.](https://raphaelramos.dev/blog/angular-standalone-components/)\n\n\n## Next 13\n\n**Turbopack**\n\nA Vercel, mantenedora do Next.js, afirmou que, em aplicativos de grande escala, o Turbopack, escrito em Rust, atualiza 10 vezes mais rápido que o Vite e 700 vezes mais rápido que o Webpack.\nAinda experimental, é necessário iniciar o servidor com a flag `next dev --turbo`\n\n**Componente de imagem**\nAgora o componente usa carregamento lento em vez de hidratação, tornando os tempos de carregamento mais rápidos e envia menos JavaScript do lado do cliente.\n\n```js\nimport Image from 'next/image'\n\nconst Example = () => (\n  <div className=\"grid-element\">\n    <Image\n      src=\"/example.png\"\n      fill\n    />\n  </div>\n)\n```\n\n\n**Otimização de fontes**\n\nOtimizará automaticamente suas fontes (incluindo fontes personalizadas) e removerá solicitações de rede externa para melhorar a privacidade e o desempenho.\n\n```js\n// pages/index.js\nimport { Inter } from 'next/font/google'\nimport styles from '../styles/component.module.css'\n\nconst inter = Inter({\n  variable: '--inter-font',\n})\n```\n\n```css\n/* styles/component.module.css */\n.text {\n  font-family: var(--inter-font);\n  font-weight: 200;\n  font-style: italic;\n}\n```\n\n**Layouts**\nO Next 13 permite a criação de layouts na pasta /app, que diferente da /pages, os componentes dentro dela são React Server Components por padrão.\nCombinando a interatividade dos aplicativos do lado do cliente com o desempenho aprimorado da renderização tradicional do servidor.\nOs layouts nessa pasta permanecem interativos e não são renderizados novamente ao navegar entre várias páginas.\n[Migração pages para app](https://beta.nextjs.org/docs/upgrade-guide#migrating-from-pages-to-app).\n\n## Node 20\n\nAtualização da engine V8 para 11.3, parte do Chromium 113, trazendo melhor desempenho e novos recursos de linguagem.\nMelhorias no tempo de tempo de execução em `URL`, `fetch()`e `EventTarget`. Além disso, o pacote inclui o lançamento de um analisador de URL de alto desempenho: Ada 2.0, escrito em C++.","html":"<p>Vamos focar aqui em algumas melhorias de performance nas versões recentes Angular 16, Next.js 13 e Node.js 20.</p>\n<h2>Angular 16</h2>\n<p>Com lançamento em maio de 2023, quero destacar 3 novidades dessa versão:</p>\n<p><strong>Servidor de desenvolvimento baseado no vite</strong></p>\n<p>Com a performance muito superior ao Webpack, a ferramenta aproveita duas melhorias feitas recentemente no ecossistema JavaScript: a disponibilidade de ES Modules no navegador e as ferramentas de empacotamento de compilação para nativo, como esbuild.<br>\nTeremos uma execução e atualização mais rápida ao usar ng serve.</p>\n<p><strong>Hidratação não destrutiva</strong></p>\n<p>Já disponível há algum tempo no Next.js, a hidratação no desenvolvimento da Web refere-se ao processo de conversão de conteúdo HTML renderizado do lado do servidor em uma página da Web totalmente interativa e funcional no lado do cliente, anexando comportamento JavaScript e ouvintes de evento. Isso reduz o tempo de interação. <a href=\"https://next.angular.io/guide/hydration\">Documentação para implementação.</a></p>\n<p><strong>Signals</strong></p>\n<p>São uma nova maneira de gerenciar mudanças de estado em aplicativos Angular, inspirados no Solid.js.</p>\n<p>É poderoso como o RxJS, mas com uma sintaxe mais simples. As assinaturas são criadas e destruídas automaticamente, então ao contrário do RxJS, não precisamos inscrever e cancelar a inscrição.</p>\n<p>Graças ao Signals, podemos usar o Angular sem zone.js, que não possui uma boa performance.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> counter = <span class=\"hljs-title function_\">signal</span>(<span class=\"hljs-number\">0</span>);\n\ncounter.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-number\">2</span>);\ncounter.<span class=\"hljs-title function_\">update</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">count</span> =></span> count + <span class=\"hljs-number\">1</span>);\n</code></pre>\n<p><strong>NgOptimizedImage</strong></p>\n<p>Do Angular 15, mas inclui por ainda não ser tão conhecido.<br>\nEssa diretiva é responsável por implementar as melhores práticas de desempenho ao carregar imagens.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">NgOptimizedImage</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@angular/common'</span>\n\n&#x3C;img ngSrc=<span class=\"hljs-string\">\"cat.jpg\"</span>>\n</code></pre>\n<p>Temos visto nas últimas versões do Angular uma buscar em diminuir a curva de aprendizagem e grandes melhorias de performance. Pontos que eram muito mais fortes no React.</p>\n<p>Confira também meu artigo sobre <a href=\"https://raphaelramos.dev/blog/angular-standalone-components/\">componentes autônomos.</a></p>\n<h2>Next 13</h2>\n<p><strong>Turbopack</strong></p>\n<p>A Vercel, mantenedora do Next.js, afirmou que, em aplicativos de grande escala, o Turbopack, escrito em Rust, atualiza 10 vezes mais rápido que o Vite e 700 vezes mais rápido que o Webpack.<br>\nAinda experimental, é necessário iniciar o servidor com a flag <code>next dev --turbo</code></p>\n<p><strong>Componente de imagem</strong><br>\nAgora o componente usa carregamento lento em vez de hidratação, tornando os tempos de carregamento mais rápidos e envia menos JavaScript do lado do cliente.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Image</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'next/image'</span>\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Example</span> = (<span class=\"hljs-params\"></span>) => (\n  <span class=\"xml\"><span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">\"grid-element\"</span>></span>\n    <span class=\"hljs-tag\">&#x3C;<span class=\"hljs-name\">Image</span>\n      <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"/example.png\"</span>\n      <span class=\"hljs-attr\">fill</span>\n    /></span>\n  <span class=\"hljs-tag\">&#x3C;/<span class=\"hljs-name\">div</span>></span></span>\n)\n</code></pre>\n<p><strong>Otimização de fontes</strong></p>\n<p>Otimizará automaticamente suas fontes (incluindo fontes personalizadas) e removerá solicitações de rede externa para melhorar a privacidade e o desempenho.</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// pages/index.js</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Inter</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'next/font/google'</span>\n<span class=\"hljs-keyword\">import</span> styles <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'../styles/component.module.css'</span>\n\n<span class=\"hljs-keyword\">const</span> inter = <span class=\"hljs-title class_\">Inter</span>({\n  <span class=\"hljs-attr\">variable</span>: <span class=\"hljs-string\">'--inter-font'</span>,\n})\n</code></pre>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-comment\">/* styles/component.module.css */</span>\n<span class=\"hljs-selector-class\">.text</span> {\n  <span class=\"hljs-attribute\">font-family</span>: <span class=\"hljs-built_in\">var</span>(--inter-font);\n  <span class=\"hljs-attribute\">font-weight</span>: <span class=\"hljs-number\">200</span>;\n  <span class=\"hljs-attribute\">font-style</span>: italic;\n}\n</code></pre>\n<p><strong>Layouts</strong><br>\nO Next 13 permite a criação de layouts na pasta /app, que diferente da /pages, os componentes dentro dela são React Server Components por padrão.<br>\nCombinando a interatividade dos aplicativos do lado do cliente com o desempenho aprimorado da renderização tradicional do servidor.<br>\nOs layouts nessa pasta permanecem interativos e não são renderizados novamente ao navegar entre várias páginas.<br>\n<a href=\"https://beta.nextjs.org/docs/upgrade-guide#migrating-from-pages-to-app\">Migração pages para app</a>.</p>\n<h2>Node 20</h2>\n<p>Atualização da engine V8 para 11.3, parte do Chromium 113, trazendo melhor desempenho e novos recursos de linguagem.<br>\nMelhorias no tempo de tempo de execução em <code>URL</code>, <code>fetch()</code>e <code>EventTarget</code>. Além disso, o pacote inclui o lançamento de um analisador de URL de alto desempenho: Ada 2.0, escrito em C++.</p>"},{"id":1436291,"title":"Angular standalone components","description":"Vídeo desenvolvendo na prática:   A estrutura do Angular é baseada em componentes. Os Componentes são...","publishedAt":"2023-04-14T21:15:57.371Z","devToSlug":"angular-standalone-components-67i","devToPath":"/raphaelramos/angular-standalone-components-67i","devToURL":"https://dev.to/raphaelramos/angular-standalone-components-67i","commentsCount":0,"publicReactionsCount":0,"positiveReactionsCount":0,"coverImage":"https://res.cloudinary.com/practicaldev/image/fetch/s--Xkhg9Siy--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/xtxx50m045epbjxcbvym.png","tags":["angular","javascript","frontend","braziliandevs"],"canonical":"https://raphaelramos.dev/blog/angular-standalone-components","collectionId":-1,"slug":"/blog/angular-standalone-components","markdown":"Vídeo desenvolvendo na prática:\n[![Vídeo sobre Angular standalone components](https://user-images.githubusercontent.com/7671459/232959832-cbc9b865-056f-4972-928d-64c5d78880cc.png)](http://www.youtube.com/watch?v=CB88oX_eI-g \"Video Title\")\n\n\nA estrutura do Angular é baseada em componentes.\nOs Componentes são partes de interface. Blocos compostos por um template, um estilo e uma classe.\n\nAntes do Angular 14 era necessário um módulo, que é um mecanismo para agrupar components, directives, pipes e services relacionados.\n\nMas agora com as APIs do standalone components, pode ser totalmente independente, deixando NgModule opcional, o que torna a criação de aplicativos Angular mais simplificada.\n\nOs módulos não foram descontinuados e ainda podem ser usados. Inclusive é possível usar componentes com módulos e sem na mesma aplicação.\nEu tenho criados novos componentes das aplicações com essa API, mas ainda não migrei as anteriores.\n\n**Etapas executas no vídeo:**\n\nCriamos o projeto\n```bash\nng new angular-standalone\n```\n\nCriamos o componente verses passando a flag --standalone\n```bash\nng generate component verses --standalone\n```\n\nAo usar a flag, foi criado nosso componente sem o arquivo de módulos e com o sinalizador standalone: true e imports dentro do arquivo de componente.\n\n```js\n@Component({\n  selector: 'app-verses',\n  standalone: true,\n  imports: [CommonModule],\n  providers: [],\n  templateUrl: './verses.component.html',\n  styleUrls: ['./verses.component.css']\n})\n```\n\nTambém criamos o serviço chamado verses na mesma pasta para consumo da API\n```bash\nng generate service verses/verses\n```\n\n```javascript\n@Injectable({\n  providedIn: 'root'\n})\nexport class VersesService {\n\n  constructor(private httpClient: HttpClient) { }\n\n  getVerse(): Observable<Verse> {\n    return this.httpClient.get<Verse>('https://www.abibliadigital.com.br/api/verses/nvi/sl/23').pipe(take(1));\n  }\n}\n```\n\nVamos adicionar o serviço e modulo HttpClientModule no nosso componente\n\n```javascript\n@Component({\n  selector: 'app-verses',\n  standalone: true,\n  imports: [CommonModule, HttpClientModule],\n  providers: [VersesService],\n  templateUrl: './verses.component.html',\n  styleUrls: ['./verses.component.css']\n})\n```\n\nPara carregar a rota desse componente em lazy loading, o que faz carregar apenas ao acessar a rota, usamos o loadComponent;\n\n```javascript\n{\n    path: '',\n    title: 'Verses',\n    loadComponent: () => import('./verses/verses.component')\n    .then(c => c.VersesComponent)\n  }\n```\n\nSe você está em uma versão do Angular anterior a 13, recomendo o upgrade devido a ganhos de performance que essa versão traz.\nNa versão 14 foi introduzido principalmente o standalone components, e se tornou estável na versão 15.\n\n[GitHub Projeto](https://github.com/raphaelramos/angular-standalone-components)","html":"<p>Vídeo desenvolvendo na prática:<br>\n<a href=\"http://www.youtube.com/watch?v=CB88oX_eI-g\" title=\"Video Title\"><img src=\"https://user-images.githubusercontent.com/7671459/232959832-cbc9b865-056f-4972-928d-64c5d78880cc.png\" alt=\"Vídeo sobre Angular standalone components\"></a></p>\n<p>A estrutura do Angular é baseada em componentes.<br>\nOs Componentes são partes de interface. Blocos compostos por um template, um estilo e uma classe.</p>\n<p>Antes do Angular 14 era necessário um módulo, que é um mecanismo para agrupar components, directives, pipes e services relacionados.</p>\n<p>Mas agora com as APIs do standalone components, pode ser totalmente independente, deixando NgModule opcional, o que torna a criação de aplicativos Angular mais simplificada.</p>\n<p>Os módulos não foram descontinuados e ainda podem ser usados. Inclusive é possível usar componentes com módulos e sem na mesma aplicação.<br>\nEu tenho criados novos componentes das aplicações com essa API, mas ainda não migrei as anteriores.</p>\n<p><strong>Etapas executas no vídeo:</strong></p>\n<p>Criamos o projeto</p>\n<pre><code class=\"hljs language-bash\">ng new angular-standalone\n</code></pre>\n<p>Criamos o componente verses passando a flag --standalone</p>\n<pre><code class=\"hljs language-bash\">ng generate component verses --standalone\n</code></pre>\n<p>Ao usar a flag, foi criado nosso componente sem o arquivo de módulos e com o sinalizador standalone: true e imports dentro do arquivo de componente.</p>\n<pre><code class=\"hljs language-js\">@<span class=\"hljs-title class_\">Component</span>({\n  <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">'app-verses'</span>,\n  <span class=\"hljs-attr\">standalone</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">imports</span>: [<span class=\"hljs-title class_\">CommonModule</span>],\n  <span class=\"hljs-attr\">providers</span>: [],\n  <span class=\"hljs-attr\">templateUrl</span>: <span class=\"hljs-string\">'./verses.component.html'</span>,\n  <span class=\"hljs-attr\">styleUrls</span>: [<span class=\"hljs-string\">'./verses.component.css'</span>]\n})\n</code></pre>\n<p>Também criamos o serviço chamado verses na mesma pasta para consumo da API</p>\n<pre><code class=\"hljs language-bash\">ng generate service verses/verses\n</code></pre>\n<pre><code class=\"hljs language-javascript\">@<span class=\"hljs-title class_\">Injectable</span>({\n  <span class=\"hljs-attr\">providedIn</span>: <span class=\"hljs-string\">'root'</span>\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">VersesService</span> {\n\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">private httpClient: HttpClient</span>) { }\n\n  <span class=\"hljs-title function_\">getVerse</span>(): <span class=\"hljs-title class_\">Observable</span>&#x3C;<span class=\"hljs-title class_\">Verse</span>> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">httpClient</span>.<span class=\"hljs-property\">get</span>&#x3C;<span class=\"hljs-title class_\">Verse</span>>(<span class=\"hljs-string\">'https://www.abibliadigital.com.br/api/verses/nvi/sl/23'</span>).<span class=\"hljs-title function_\">pipe</span>(<span class=\"hljs-title function_\">take</span>(<span class=\"hljs-number\">1</span>));\n  }\n}\n</code></pre>\n<p>Vamos adicionar o serviço e modulo HttpClientModule no nosso componente</p>\n<pre><code class=\"hljs language-javascript\">@<span class=\"hljs-title class_\">Component</span>({\n  <span class=\"hljs-attr\">selector</span>: <span class=\"hljs-string\">'app-verses'</span>,\n  <span class=\"hljs-attr\">standalone</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">imports</span>: [<span class=\"hljs-title class_\">CommonModule</span>, <span class=\"hljs-title class_\">HttpClientModule</span>],\n  <span class=\"hljs-attr\">providers</span>: [<span class=\"hljs-title class_\">VersesService</span>],\n  <span class=\"hljs-attr\">templateUrl</span>: <span class=\"hljs-string\">'./verses.component.html'</span>,\n  <span class=\"hljs-attr\">styleUrls</span>: [<span class=\"hljs-string\">'./verses.component.css'</span>]\n})\n</code></pre>\n<p>Para carregar a rota desse componente em lazy loading, o que faz carregar apenas ao acessar a rota, usamos o loadComponent;</p>\n<pre><code class=\"hljs language-javascript\">{\n    <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">''</span>,\n    <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">'Verses'</span>,\n    <span class=\"hljs-attr\">loadComponent</span>: <span class=\"hljs-function\">() =></span> <span class=\"hljs-keyword\">import</span>(<span class=\"hljs-string\">'./verses/verses.component'</span>)\n    .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">c</span> =></span> c.<span class=\"hljs-property\">VersesComponent</span>)\n  }\n</code></pre>\n<p>Se você está em uma versão do Angular anterior a 13, recomendo o upgrade devido a ganhos de performance que essa versão traz.<br>\nNa versão 14 foi introduzido principalmente o standalone components, e se tornou estável na versão 15.</p>\n<p><a href=\"https://github.com/raphaelramos/angular-standalone-components\">GitHub Projeto</a></p>"},{"id":1436260,"title":"Como se tornar um desenvolvedor","description":"O desenvolvedor é um profissional programador, que escreve programas de computador, envolvido com o...","publishedAt":"2023-04-14T19:55:39.764Z","devToSlug":"como-se-tornar-um-desenvolvedor-59m5","devToPath":"/raphaelramos/como-se-tornar-um-desenvolvedor-59m5","devToURL":"https://dev.to/raphaelramos/como-se-tornar-um-desenvolvedor-59m5","commentsCount":0,"publicReactionsCount":0,"positiveReactionsCount":0,"coverImage":"https://res.cloudinary.com/practicaldev/image/fetch/s--AEkMi6-7--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/uploads/articles/whf8uqg3usmui7htz87o.png","tags":["braziliandevs","webdev","beginners"],"canonical":"https://raphaelramos.dev/blog/iniciando-como-dev","collectionId":-1,"slug":"/blog/iniciando-como-dev","markdown":"O desenvolvedor é um profissional programador, que escreve programas de computador, envolvido com o projeto do início ao fim.\n\nConfira algumas dicas para você que está iniciando na área.\n\n**Aprenda a diferença entre as carreiras**\nQual a diferença entre Front-end e Back-end? E o que são DevOps e Cientista de dados?\n\nVocê precisa, antes de tudo, saber responder essas perguntas e é possível encontrar artigos e vídeos no YouTube sobre isso.\n\nHá também os profissionais de UI/UX e QA, que não estão tão ligados à programação e não iremos falar sobre eles, mas podem fazer parte dos projetos e você precisa conhecer suas funções.\n\nLinks:\n[Diferença Front-end e Back-end](https://blog.geekhunter.com.br/back-end-front-end/)\n[DevOps](https://www.devmedia.com.br/devops-conheca-os-papeis-do-desenvolvedor/34103)\n[Cientista de dados](https://programathor.com.br/blog/voce-sabe-o-que-e-cientista-de-dados-conheca-essa-profissao-do-futuro/)\n\n**Escolha uma carreira**\nAgora que você sabe a diferença entre essas profissões, você deve escolher em qual vai começar a sua carreira.\nDica: Confira se você se empolga mais com a parte visual, com a parte funcional ou como tudo isso consegue ficar na nuvem.\n\n**Aprenda lógica de programação**\nMais uma vez, há muito conteúdo na internet sobre isso. Sem entender a lógica, você não vai conseguir codificar.\n\nLinks:\n[Como Funcionam as linguagens](https://www.youtube.com/watch?v=Ol8KcAc7N2c)\n[Como melhorar minha lógica de programação?](https://youtube.com/watch?v=LA2L4OsYrY0)\n[Algoritmos e lógica de programação](https://www.alura.com.br/artigos/algoritmos-e-logica-de-programacao)\n\n**Defina sua stack principal baseado na carreira que vai seguir**\nAgora que você entende sobre as carreiras e tem noção de lógica de programação, vamos para as linguagens.\n\nÉ importante essa definição para saber onde começar seus estudos, já que há várias linguagens. Dentro da sua Stack, escolha quais linguagens que irá aprender primeiro, que serão suas hard skills.\n\nPara front-end, você deve saber HTML, CSS e Javascript / Typescript.\n\nMobile, você pode escolher entre Java e Kotlin (Android), Swift (iOS) e as híbridas como Flutter / Dart, React Native e Ionic.\n\nBack-end pode ser entre Node, Python, Java, C, PHP, Ruby (e várias outras existentes). Também inclui bancos de dados como MySQL, postgreSQL, Oracle...\n\nVou deixar o link para o ranking das principais usadas em 2022 segundo o GitHub. Dê preferência às que são mais usadas ou as que estão em crescimento.\n\nListei alguns exemplos aqui, mas pesquise, passe tempo no Google, Youtube e converse com conhecidos da área.\n\nLinks:\n[Ranking GitHub linguagens](https://octoverse.github.com/2022/top-programming-languages)\n[Stack Tecnológico](https://blog.betrybe.com/tecnologia/stack-tecnologico/)\n\n**Ainda não sei com o que começar**\nSe você chegou nessa parte sem saber com qual Stack começar, eu sempre digo, apenas comece e não demore.\nDepois que você aprendeu o mínimo de lógica e uma linguagem, é mais fácil mudar para outra.\nVocê pode começar em front-end com Javascript. Vai precisar também de HTML e CSS para fazer a parte visual.\n\nComo sei se já aprendi o mínimo?\nVocê deve saber os conceitos básicos da linguagem e conseguir criar algo, mesmo que simples, mas funcional.\n\nLinks:\n[Comece do 0 com Javascript - Rocketseat discovery gratuito](https://www.rocketseat.com.br/discover)\n[Curso gratuito de introdução ao Javascript](https://www.udemy.com/course/introducao-ao-javascript)\n[Curso gratuito HTML5, CSS3 e Javascript](https://www.udemy.com/course/html5-css3-e-javascript-na-pratica-3-projetos)\n[Outros cursos gratuitos na Udemy](https://www.udemy.com/courses/development/?price=price-free&sort=popularity)\n\n**Procure um roadmap de estudos ou um curso completo do básico ao avançado**\nNão saia estudando aleatoriamente, tenha um plano de estudos. Não adianta você ter apenas um pouco de conhecimento de várias coisa, você precisa ser bom em algo. Tenha em mente que se você não está disposto a estudar algumas horas por dia, entrar na área a curto prazo não é para você.\n\nExemplos de plataformas de cursos: rocketseat, alura, dio e udemy.\nExemplos faculdades EAD: descomplica, fiap, xp educação\n\nCrie projetos com o que você aprendeu e coloque-os no GitHub\nO GitHub será o seu portfólio, principalmente para você que está começando e não tem experiência em empresas para contar. Além disso, é obrigatório saber git para trabalhar como desenvolvedor.\n\nCrie um bom README para eles, pois isso é muito importante e é a primeira coisa que vemos assim que abrimos o repositório. Informe o que o projeto faz, as stacks usadas e como executá-lo.\n\nLinks:\n[A Anatomia de um repositório](https://dev.to/github/a-anatomia-de-um-repositorio-5cda)\n[Gerador de README](https://www.tabnews.com.br/HenriikOh6veira/gerador-de-readme-para-github)\n\n**Procure saber sobre o Scrum**\nScrum é uma metodologia de trabalho ágil utilizada em quase todas as empresas da área. Conhecer dará a você vantagem na entrevista e não deixará você perdido nas cerimônias quando começar a trabalhar.\n\nLinks:\n[Resumo sobre Scrum](https://linkedin.com/pulse/um-resumo-de-tudo-que-você-precisa-saber-sobre-o-scrum-netto)\n[Processo desenvolvimento de software](https://blog.xpeducacao.com.br/processo-desenvolvimento-software/)\n\n**Crie seu perfil no LinkedIn**\nO LinkedIn é uma rede social profissional onde as pessoas compartilham no feed coisas relacionadas ao seu trabalho, permitindo também que você siga colegas de trabalho e pessoas influentes em sua área.\n\nO perfil do LinkedIn funciona como um currículo, onde você pode indicar a empresa em que trabalha, suas experiências anteriores, sua formação, seus certificados e suas habilidades.\n\nDicas para o seu perfil:\n\nCrie sua URL personalizada com algo próximo ao seu nome. Lembre-se de que é o seu perfil profissional.\n\nNão use selfies e escolha uma foto com boa iluminação e fundo clean.\n\nEm Sobre, coloque suas habilidades e quanto tempo trabalha com elas.\n\n**Currículo**\nAtualmente o LinkedIn é a ferramenta mais utilizada para currículo na área, mas algumas empresas podem solicitar um PDF, então é importante tê-lo.\n\nNa seção pessoal do seu PDF, as únicas informações necessárias são seu nome completo, e-mail, telefone, cidade e os links para seu perfil do LinkedIn e GitHub.\n\nEm sites de recrutamento, como o gupy.io, é necessário cadastrar todo o seu currículo em campos específicos, assim como no LinkedIn.\n\nLinks:\n[Palavras chaves para currículo](https://www.youtube.com/watch?v=boeIgg664y4)\n[Como exportar o LinkedIn em PDF](https://www.linkedin.com/help/linkedin/answer/a540994/salvar-um-perfil-como-pdf?lang=pt)\n\n**Candidate-se a vagas**\nBons sites para procurar vagas são o LinkedIn, portal de vagas do gupy e o Geek Hunter.\n\nPesquise as vagas por sua principal stack, por exemplo, Java. Confirme a senioridade no título da vaga se é compatível com a sua: Jr, Pl, Sr.\n\nConfirme também se possui os requisitos obrigatórios. Se sim, candidate-se.\n\nDica extra: Glassdoor é um site onde você encontra avaliações de empresas informadas de forma anônima por funcionários e seus salários.\n\n**Processo de entrevistas**\nO processo varia entre empresas, mas geralmente são 3 etapas.\n\nO recrutador entrará em contato para uma entrevista para verificar se você realmente possui todos os requisitos e falar sobre a vaga e a empresa. Nessa etapa, você pode tirar dúvidas sobre a empresa e a faixa salarial.\n\nSe continuar, agora é o momento da entrevista técnica ou teste. Na entrevista técnica Um profissional da área fará perguntas técnicas dentro da vaga. Você não precisa saber tudo o que ele perguntar, pois será avaliado no geral. Vá sem medo, mesmo que você não passe, terá mais noção do que estudar.\n\nQuando há um teste técnico, pode ser por desafio, onde você desenvolve e envia depois o repositório ou o menos comum live coding, onde sua tela é compartilhada e vai desenvolvendo ao vivo o que é proposto.\n\nSe der continuidade, agora é o momento de entrevista com o cliente ou gestor do time. Em empresas como consultorias, você não vai trabalhar em um produto dela e sim no de um cliente que é outra empresa. Você será um consultor de uma empresa dentro de outra.\n\nPara cada etapa o recrutador irá te mandar um invite por email, onde haverá a data/horário e um link para você participar. O atraso pode acabar com a sua chance, por isso, entre antes.\n\n**Dica Extra:**\n\nEstude sobre as IA generativas, como funcionam e como podem te auxiliar.\n\n## Dúvidas Frequentes\n\n**Como vou saber se já estou preparado para procurar uma vaga como júnior?**\nUma maneira de você saber é se já conseguiu criar algo, mesmo que simples, mas funcional e publicou em um repositório git.\nTambém saber os conceitos da linguagem da vaga, já que vão te perguntar na entrevista técnica. É possível encontrar exemplos dessas perguntas de entrevistas na internet.\n\n**Qual o salário de um Júnior?**\nSalários variam entre stacks (tecnologia), empresas, cidades, experiência e necessidade.\nSegundo o glassdoor, atualmente a média salarial de um front-end júnior está em R$ 3.000 e pleno R$6.500.\nMas como eu disse antes, há indicadores que fazem variar. Podendo ser menor ou maior.\n\n**Consigo entrar no mercado em 6 meses?**\nEssa é difícil de responder. Se você tiver um plano de estudos organizado e dispor de tempo considerável diariamente, deve ser possível. Mas é necessário disciplina, pois é muito conteúdo em pouco tempo e você precisa ter colocado em prática, mesmo que em projetos pessoais para estudos.\n\nDisclaimer: É uma área geralmente com bons salários e organizada, mas alto salário no primeiro emprego, sem experiência e somente com 6 meses de estudos, não existe. Há uma falsa divulgação sobre isso, colocando salário de pleno como sendo para júnior iniciante.\n\n**Preciso de faculdade?**\nResumindo: Depende.\n\nHá vagas que não exigem graduação na área, apenas conhecimento equivalente, mas há empresas que colocam como requisito obrigatório completo ou em curso.\nVocê não precisa esperar se formar. Conheço excelentes desenvolvedores que nunca estiveram em uma faculdade, então é mais pelo requisito da vaga e seu plano de carreira. Já para cargos de gestão vai ser mais difícil fugir de uma graduação e pós-graduação.\n\nAviso: Faculdade sozinha não vai ser suficiente. Você vai precisar realizar alguns cursos também.\n\n**O que são as certificações?**\nHá também as certificações que você obtém realizando uma prova elaborada pela empresa desenvolvedora da tecnologia.\n\nVocê não precisa ter feito faculdade para realizar essas provas, que são pagas e avançadas, e é um incremento muito alto para seu currículo.\n\nEssas certificações demonstram que a pessoa tem conhecimento avançado naquela Stack. Elas também têm validade, precisando ser renovadas. Ex: AWS Certified Solutions Architect – Professional\n\n**Preciso saber inglês?**\nPara ser um desenvolvedor você precisa de inglês básico, já que as linguagens de programação e suas documentações são em inglês.\n\nJá para vagas em que parte do time ou o cliente está no exterior, o inglês avançado será necessário, já que há conversação.\n\n**Posso ser Full Stack?**\nO desenvolvedor full Stack é o profissional que cobre várias áreas por trabalhar com mais tecnologias, desenvolvendo a aplicação de ponta a ponta, podendo ser front-end e back-end ao mesmo tempo.\n\nO full stack é um dos cargo mais procurado por empresas no Brasil.\n\nPorém não indico no começo, por ter um escopo muito maior para estudos e experiências.\n\n**Diferença entre PJ e Cooperado**\nComo PJ você vai precisar ter um CPNJ ME para emitir uma nota fiscal para os pagamentos e pagar os impostos (depende do faturamento, mas cerca de 10%).\nSem emitir nota fiscal, não te pagam.\n\nComo cooperado você não tem essa responsabilidade, a empresa faz todo tramite e cobra de você uma porcentagem para isso. Fora isso é como ser um PJ.\n\nObs: A atividade de desenvolvedor não se enquadra como MEI e a empresa pode não aceitar. Nesse caso pode ser que você precise de um contador para abrir um ME.\n\n**PJ ganha mais que CLT?**\nA remuneração das vagas, mesmo que tenha os mesmos requisitos, tem variação entre empresas e o PJ de uma pode ficar próximo ao CLT de outra, em alguns casos.\nMas geralmente é maior.\n\nVale destacar que em muitas é pago por hora, ao invés de valor fechado. Quando é por hora, há meses que você irá receber menos, por haver menos dias e feriados.\n\n**Como me preparar para um layoff?**\nAs demissões em massa têm sido comuns em empresas de tecnologias e apesar da recolocação não ser muito demorada, pode acontecer. É importante que você tenha uma reserva em dinheiro para sobreviver um tempo, principalmente se for PJ ou cooperado, onde você recebe apenas as horas que já trabalhou. Pode ser um erro gastar totalmente o que ganha sem uma reserva.\n\nTrabalhe também na sua marca pessoal, estudando coisas novas, criando projetos pessoais, escrevendo artigos e participando de comunidades.","html":"<p>O desenvolvedor é um profissional programador, que escreve programas de computador, envolvido com o projeto do início ao fim.</p>\n<p>Confira algumas dicas para você que está iniciando na área.</p>\n<p><strong>Aprenda a diferença entre as carreiras</strong><br>\nQual a diferença entre Front-end e Back-end? E o que são DevOps e Cientista de dados?</p>\n<p>Você precisa, antes de tudo, saber responder essas perguntas e é possível encontrar artigos e vídeos no YouTube sobre isso.</p>\n<p>Há também os profissionais de UI/UX e QA, que não estão tão ligados à programação e não iremos falar sobre eles, mas podem fazer parte dos projetos e você precisa conhecer suas funções.</p>\n<p>Links:<br>\n<a href=\"https://blog.geekhunter.com.br/back-end-front-end/\">Diferença Front-end e Back-end</a><br>\n<a href=\"https://www.devmedia.com.br/devops-conheca-os-papeis-do-desenvolvedor/34103\">DevOps</a><br>\n<a href=\"https://programathor.com.br/blog/voce-sabe-o-que-e-cientista-de-dados-conheca-essa-profissao-do-futuro/\">Cientista de dados</a></p>\n<p><strong>Escolha uma carreira</strong><br>\nAgora que você sabe a diferença entre essas profissões, você deve escolher em qual vai começar a sua carreira.<br>\nDica: Confira se você se empolga mais com a parte visual, com a parte funcional ou como tudo isso consegue ficar na nuvem.</p>\n<p><strong>Aprenda lógica de programação</strong><br>\nMais uma vez, há muito conteúdo na internet sobre isso. Sem entender a lógica, você não vai conseguir codificar.</p>\n<p>Links:<br>\n<a href=\"https://www.youtube.com/watch?v=Ol8KcAc7N2c\">Como Funcionam as linguagens</a><br>\n<a href=\"https://youtube.com/watch?v=LA2L4OsYrY0\">Como melhorar minha lógica de programação?</a><br>\n<a href=\"https://www.alura.com.br/artigos/algoritmos-e-logica-de-programacao\">Algoritmos e lógica de programação</a></p>\n<p><strong>Defina sua stack principal baseado na carreira que vai seguir</strong><br>\nAgora que você entende sobre as carreiras e tem noção de lógica de programação, vamos para as linguagens.</p>\n<p>É importante essa definição para saber onde começar seus estudos, já que há várias linguagens. Dentro da sua Stack, escolha quais linguagens que irá aprender primeiro, que serão suas hard skills.</p>\n<p>Para front-end, você deve saber HTML, CSS e Javascript / Typescript.</p>\n<p>Mobile, você pode escolher entre Java e Kotlin (Android), Swift (iOS) e as híbridas como Flutter / Dart, React Native e Ionic.</p>\n<p>Back-end pode ser entre Node, Python, Java, C, PHP, Ruby (e várias outras existentes). Também inclui bancos de dados como MySQL, postgreSQL, Oracle...</p>\n<p>Vou deixar o link para o ranking das principais usadas em 2022 segundo o GitHub. Dê preferência às que são mais usadas ou as que estão em crescimento.</p>\n<p>Listei alguns exemplos aqui, mas pesquise, passe tempo no Google, Youtube e converse com conhecidos da área.</p>\n<p>Links:<br>\n<a href=\"https://octoverse.github.com/2022/top-programming-languages\">Ranking GitHub linguagens</a><br>\n<a href=\"https://blog.betrybe.com/tecnologia/stack-tecnologico/\">Stack Tecnológico</a></p>\n<p><strong>Ainda não sei com o que começar</strong><br>\nSe você chegou nessa parte sem saber com qual Stack começar, eu sempre digo, apenas comece e não demore.<br>\nDepois que você aprendeu o mínimo de lógica e uma linguagem, é mais fácil mudar para outra.<br>\nVocê pode começar em front-end com Javascript. Vai precisar também de HTML e CSS para fazer a parte visual.</p>\n<p>Como sei se já aprendi o mínimo?<br>\nVocê deve saber os conceitos básicos da linguagem e conseguir criar algo, mesmo que simples, mas funcional.</p>\n<p>Links:<br>\n<a href=\"https://www.rocketseat.com.br/discover\">Comece do 0 com Javascript - Rocketseat discovery gratuito</a><br>\n<a href=\"https://www.udemy.com/course/introducao-ao-javascript\">Curso gratuito de introdução ao Javascript</a><br>\n<a href=\"https://www.udemy.com/course/html5-css3-e-javascript-na-pratica-3-projetos\">Curso gratuito HTML5, CSS3 e Javascript</a><br>\n<a href=\"https://www.udemy.com/courses/development/?price=price-free&#x26;sort=popularity\">Outros cursos gratuitos na Udemy</a></p>\n<p><strong>Procure um roadmap de estudos ou um curso completo do básico ao avançado</strong><br>\nNão saia estudando aleatoriamente, tenha um plano de estudos. Não adianta você ter apenas um pouco de conhecimento de várias coisa, você precisa ser bom em algo. Tenha em mente que se você não está disposto a estudar algumas horas por dia, entrar na área a curto prazo não é para você.</p>\n<p>Exemplos de plataformas de cursos: rocketseat, alura, dio e udemy.<br>\nExemplos faculdades EAD: descomplica, fiap, xp educação</p>\n<p>Crie projetos com o que você aprendeu e coloque-os no GitHub<br>\nO GitHub será o seu portfólio, principalmente para você que está começando e não tem experiência em empresas para contar. Além disso, é obrigatório saber git para trabalhar como desenvolvedor.</p>\n<p>Crie um bom README para eles, pois isso é muito importante e é a primeira coisa que vemos assim que abrimos o repositório. Informe o que o projeto faz, as stacks usadas e como executá-lo.</p>\n<p>Links:<br>\n<a href=\"https://dev.to/github/a-anatomia-de-um-repositorio-5cda\">A Anatomia de um repositório</a><br>\n<a href=\"https://www.tabnews.com.br/HenriikOh6veira/gerador-de-readme-para-github\">Gerador de README</a></p>\n<p><strong>Procure saber sobre o Scrum</strong><br>\nScrum é uma metodologia de trabalho ágil utilizada em quase todas as empresas da área. Conhecer dará a você vantagem na entrevista e não deixará você perdido nas cerimônias quando começar a trabalhar.</p>\n<p>Links:<br>\n<a href=\"https://linkedin.com/pulse/um-resumo-de-tudo-que-voc%C3%AA-precisa-saber-sobre-o-scrum-netto\">Resumo sobre Scrum</a><br>\n<a href=\"https://blog.xpeducacao.com.br/processo-desenvolvimento-software/\">Processo desenvolvimento de software</a></p>\n<p><strong>Crie seu perfil no LinkedIn</strong><br>\nO LinkedIn é uma rede social profissional onde as pessoas compartilham no feed coisas relacionadas ao seu trabalho, permitindo também que você siga colegas de trabalho e pessoas influentes em sua área.</p>\n<p>O perfil do LinkedIn funciona como um currículo, onde você pode indicar a empresa em que trabalha, suas experiências anteriores, sua formação, seus certificados e suas habilidades.</p>\n<p>Dicas para o seu perfil:</p>\n<p>Crie sua URL personalizada com algo próximo ao seu nome. Lembre-se de que é o seu perfil profissional.</p>\n<p>Não use selfies e escolha uma foto com boa iluminação e fundo clean.</p>\n<p>Em Sobre, coloque suas habilidades e quanto tempo trabalha com elas.</p>\n<p><strong>Currículo</strong><br>\nAtualmente o LinkedIn é a ferramenta mais utilizada para currículo na área, mas algumas empresas podem solicitar um PDF, então é importante tê-lo.</p>\n<p>Na seção pessoal do seu PDF, as únicas informações necessárias são seu nome completo, e-mail, telefone, cidade e os links para seu perfil do LinkedIn e GitHub.</p>\n<p>Em sites de recrutamento, como o gupy.io, é necessário cadastrar todo o seu currículo em campos específicos, assim como no LinkedIn.</p>\n<p>Links:<br>\n<a href=\"https://www.youtube.com/watch?v=boeIgg664y4\">Palavras chaves para currículo</a><br>\n<a href=\"https://www.linkedin.com/help/linkedin/answer/a540994/salvar-um-perfil-como-pdf?lang=pt\">Como exportar o LinkedIn em PDF</a></p>\n<p><strong>Candidate-se a vagas</strong><br>\nBons sites para procurar vagas são o LinkedIn, portal de vagas do gupy e o Geek Hunter.</p>\n<p>Pesquise as vagas por sua principal stack, por exemplo, Java. Confirme a senioridade no título da vaga se é compatível com a sua: Jr, Pl, Sr.</p>\n<p>Confirme também se possui os requisitos obrigatórios. Se sim, candidate-se.</p>\n<p>Dica extra: Glassdoor é um site onde você encontra avaliações de empresas informadas de forma anônima por funcionários e seus salários.</p>\n<p><strong>Processo de entrevistas</strong><br>\nO processo varia entre empresas, mas geralmente são 3 etapas.</p>\n<p>O recrutador entrará em contato para uma entrevista para verificar se você realmente possui todos os requisitos e falar sobre a vaga e a empresa. Nessa etapa, você pode tirar dúvidas sobre a empresa e a faixa salarial.</p>\n<p>Se continuar, agora é o momento da entrevista técnica ou teste. Na entrevista técnica Um profissional da área fará perguntas técnicas dentro da vaga. Você não precisa saber tudo o que ele perguntar, pois será avaliado no geral. Vá sem medo, mesmo que você não passe, terá mais noção do que estudar.</p>\n<p>Quando há um teste técnico, pode ser por desafio, onde você desenvolve e envia depois o repositório ou o menos comum live coding, onde sua tela é compartilhada e vai desenvolvendo ao vivo o que é proposto.</p>\n<p>Se der continuidade, agora é o momento de entrevista com o cliente ou gestor do time. Em empresas como consultorias, você não vai trabalhar em um produto dela e sim no de um cliente que é outra empresa. Você será um consultor de uma empresa dentro de outra.</p>\n<p>Para cada etapa o recrutador irá te mandar um invite por email, onde haverá a data/horário e um link para você participar. O atraso pode acabar com a sua chance, por isso, entre antes.</p>\n<p><strong>Dica Extra:</strong></p>\n<p>Estude sobre as IA generativas, como funcionam e como podem te auxiliar.</p>\n<h2>Dúvidas Frequentes</h2>\n<p><strong>Como vou saber se já estou preparado para procurar uma vaga como júnior?</strong><br>\nUma maneira de você saber é se já conseguiu criar algo, mesmo que simples, mas funcional e publicou em um repositório git.<br>\nTambém saber os conceitos da linguagem da vaga, já que vão te perguntar na entrevista técnica. É possível encontrar exemplos dessas perguntas de entrevistas na internet.</p>\n<p><strong>Qual o salário de um Júnior?</strong><br>\nSalários variam entre stacks (tecnologia), empresas, cidades, experiência e necessidade.<br>\nSegundo o glassdoor, atualmente a média salarial de um front-end júnior está em R$ 3.000 e pleno R$6.500.<br>\nMas como eu disse antes, há indicadores que fazem variar. Podendo ser menor ou maior.</p>\n<p><strong>Consigo entrar no mercado em 6 meses?</strong><br>\nEssa é difícil de responder. Se você tiver um plano de estudos organizado e dispor de tempo considerável diariamente, deve ser possível. Mas é necessário disciplina, pois é muito conteúdo em pouco tempo e você precisa ter colocado em prática, mesmo que em projetos pessoais para estudos.</p>\n<p>Disclaimer: É uma área geralmente com bons salários e organizada, mas alto salário no primeiro emprego, sem experiência e somente com 6 meses de estudos, não existe. Há uma falsa divulgação sobre isso, colocando salário de pleno como sendo para júnior iniciante.</p>\n<p><strong>Preciso de faculdade?</strong><br>\nResumindo: Depende.</p>\n<p>Há vagas que não exigem graduação na área, apenas conhecimento equivalente, mas há empresas que colocam como requisito obrigatório completo ou em curso.<br>\nVocê não precisa esperar se formar. Conheço excelentes desenvolvedores que nunca estiveram em uma faculdade, então é mais pelo requisito da vaga e seu plano de carreira. Já para cargos de gestão vai ser mais difícil fugir de uma graduação e pós-graduação.</p>\n<p>Aviso: Faculdade sozinha não vai ser suficiente. Você vai precisar realizar alguns cursos também.</p>\n<p><strong>O que são as certificações?</strong><br>\nHá também as certificações que você obtém realizando uma prova elaborada pela empresa desenvolvedora da tecnologia.</p>\n<p>Você não precisa ter feito faculdade para realizar essas provas, que são pagas e avançadas, e é um incremento muito alto para seu currículo.</p>\n<p>Essas certificações demonstram que a pessoa tem conhecimento avançado naquela Stack. Elas também têm validade, precisando ser renovadas. Ex: AWS Certified Solutions Architect – Professional</p>\n<p><strong>Preciso saber inglês?</strong><br>\nPara ser um desenvolvedor você precisa de inglês básico, já que as linguagens de programação e suas documentações são em inglês.</p>\n<p>Já para vagas em que parte do time ou o cliente está no exterior, o inglês avançado será necessário, já que há conversação.</p>\n<p><strong>Posso ser Full Stack?</strong><br>\nO desenvolvedor full Stack é o profissional que cobre várias áreas por trabalhar com mais tecnologias, desenvolvendo a aplicação de ponta a ponta, podendo ser front-end e back-end ao mesmo tempo.</p>\n<p>O full stack é um dos cargo mais procurado por empresas no Brasil.</p>\n<p>Porém não indico no começo, por ter um escopo muito maior para estudos e experiências.</p>\n<p><strong>Diferença entre PJ e Cooperado</strong><br>\nComo PJ você vai precisar ter um CPNJ ME para emitir uma nota fiscal para os pagamentos e pagar os impostos (depende do faturamento, mas cerca de 10%).<br>\nSem emitir nota fiscal, não te pagam.</p>\n<p>Como cooperado você não tem essa responsabilidade, a empresa faz todo tramite e cobra de você uma porcentagem para isso. Fora isso é como ser um PJ.</p>\n<p>Obs: A atividade de desenvolvedor não se enquadra como MEI e a empresa pode não aceitar. Nesse caso pode ser que você precise de um contador para abrir um ME.</p>\n<p><strong>PJ ganha mais que CLT?</strong><br>\nA remuneração das vagas, mesmo que tenha os mesmos requisitos, tem variação entre empresas e o PJ de uma pode ficar próximo ao CLT de outra, em alguns casos.<br>\nMas geralmente é maior.</p>\n<p>Vale destacar que em muitas é pago por hora, ao invés de valor fechado. Quando é por hora, há meses que você irá receber menos, por haver menos dias e feriados.</p>\n<p><strong>Como me preparar para um layoff?</strong><br>\nAs demissões em massa têm sido comuns em empresas de tecnologias e apesar da recolocação não ser muito demorada, pode acontecer. É importante que você tenha uma reserva em dinheiro para sobreviver um tempo, principalmente se for PJ ou cooperado, onde você recebe apenas as horas que já trabalhou. Pode ser um erro gastar totalmente o que ganha sem uma reserva.</p>\n<p>Trabalhe também na sua marca pessoal, estudando coisas novas, criando projetos pessoais, escrevendo artigos e participando de comunidades.</p>"}]